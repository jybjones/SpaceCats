'use strict';

var gameState = {
  create: function create() {
    this.physics.startSystem(Phaser.Physics.ARCADE);
    this.background = game.add.tileSprite(0, 0, this.game.world.width, this.game.world.height, 'space');
    this.background.autoScroll(-60, -20);
    this.setupPlayer();
    this.player;
    this.enemy;
    this.enemyTwo;
    this.catTrail;
    this.setupButtons();
    this.setupLazers();
    this.setupEnemies();
    this.setupExplosions();
    this.fontStyle;

    this.score = 0;
    this.lives = 9;
    this.scoreString = '';
    this.scoreText;
    this.PlayerAlive = true;
    this.endTime = 0;

    this.music;
    this.ouch;
    this.boom;
    this.ding;
    this.pew;
    this.wee;
    this.fireRate = 1000;
    this.nextFire = 0;
    this.alive = true;

    game.time.events.loop(Phaser.Timer.SECOND * 2, this.spawnEnemy, this);
    game.physics.startSystem(Phaser.Physics.ARCADE);

    game.time.advancedTiming = true;
    this.fontStyle = { font: '40px Arial', fill: '#FFCC00', stroke: '#333', strokeThickness: 3, align: 'center' };
    this.instructions = this.add.text(400, 500, 'Use mouse to Move, Press Spacebar to Fire\n' + 'Good Luck', { font: '28px Arial', fill: '#fff', align: 'center' });
    this.instructions.anchor.setTo(0.5, 0.5);
    this.instExpire = this.time.now + 9000;

    // var style = { font: '34px Arial', fill: '#fff'};
    this.scoreText = this.game.add.text(60, 10, 'Score : ' + this.score, this.fontStyle);
    this.livesText = this.game.add.text(game.world.width - 200, 10, 'Lives : ' + this.lives, this.fontStyle);

    // set the end time to 30 seconds in the future
    this.endTime = game.time.now + 1000 * 30;
    // every time the user clicks, add 5 seconds to the end time
    // game.input.onDown.add(function() {
    //     this.endTime = this.endTime + (1000 * 5);
    //     console.log("Added 5 seconds");
    // }, this);
    this.music = this.add.audio('game_audio');
    this.music.play('', 0, 0.3, true);
    this.ouch = this.add.audio('hurt_audio');
    this.boom = this.add.audio('explosion_audio');
    this.ding = this.add.audio('select_audio');
    this.pew = this.add.audio('pew_audio');
    this.wee = this.add.audio('wee_audio');
  },

  update: function update() {
    //  If the PLAYER is > 8px away from the pointer then let's move to it
    if (this.physics.arcade.distanceToPointer(this.player, this.game.input.activePointer) > 8) {
      //  Make the object seek to the active pointer (mouse or touch).
      this.physics.arcade.moveToPointer(this.player, 400);
      this.player.rotation = this.game.physics.arcade.angleToPointer(this.player);
    } else {
      this.player.body.velocity.set(0);
    }

    // //check for player commands
    //   if( this.cursors.left.isDown ) {
    //       if( this.player.angle > (-90) )
    //           this.player.angle -= 0.5;
    //   }
    //   else if( this.cursors.right.isDown ){
    //       if( this.player.angle < 90 )
    //           this.player.angle += 0.5;
    //   }
    // get time remaining in miliseconds
    var style = { font: '34px Arial', align: 'center' };
    var timeLeft = this.endTime - game.time.now;
    if (timeLeft >= 0) {
      // show time remaining in seconds (divide by 1000)
      game.debug.text(Math.ceil(timeLeft / 1000) + ' seconds left!', 500, 100, '#00ff00');
    } else {
      game.debug.text('Ran out of time!', 500, 100, '#ff0000');
      // this.music.stop();
      game.state.start('GameOver');
    }

    ////////LAZERS////////////
    // this.player.rotation = this.game.physics.arcade.angleToPointer(this.lazer);
    if (this.PlayerAlive && this.fireButton.isDown) {
      this.fireLazers();
      this.pew.play();
    }
    //     if (game.time.now > firingTimer)
    // {
    //     enemyFires();
    // }
    //  function updateCounter() {
    //  this.total++;
    //  }
    //  function render() {
    // this. game.debug.text('Time until event: ' + timer.duration.toFixed(0), 32, 32);
    //  this.game.debug.text('Loop Count: ' + total, 32, 64);

    //  }

    game.physics.arcade.overlap(this.lazers, this.enemies, this.lazerHitsEnemy, null, this);
    // this.game.physics.arcade.overlap( this.lazers, null, this);
    this.game.physics.arcade.collide(this.enemies, this.player, this.enemyHitPlayer, null, this);
    this.game.physics.arcade.collide(this.enemies, this.lazers, this.lazerHitsEnemy, null, this);
    if (this.instructions.exists && this.time.now > this.instExpire) {
      this.instructions.destroy();
    }
  },
  lazerHitsEnemy: function lazerHitsEnemy(lazer, enemy) {
    //  When a lzaer hits an enemy we kill them both
    if (this.enemies.getIndex(enemy) > -1) this.enemies.remove(enemy);
    this.boom.play();
    enemy.kill();
    lazer.kill();
    this.score += 10;
    this.scoreText.setText('Score : ' + this.score);
    //  And create an explosion
    var explosion = this.explosions.getFirstExists(false);
    explosion.reset(enemy.body.x, enemy.body.y);
    explosion.play('boom', 30, false, true);
    // enemyBullets.callAll('kill',this);
    // restart();
  },

  enemyHitPlayer: function enemyHitPlayer(player, enemy) {
    if (this.enemies.getIndex(enemy) > -1) this.enemies.remove(enemy);
    enemy.kill();
    this.ouch.play();
    this.lives -= 1;
    this.livesText.setText('Lives : ' + this.lives);
    var explosion = this.explosions.getFirstExists(false);
    explosion.reset(player.body.x, player.body.y);
    explosion.reset(enemy.body.x, enemy.body.y);
    explosion.play('boom', 30, false, true);
    game.physics.arcade.overlap(this.player, this.enemies, this.enemyHitPlayer, null, this);

    if (this.lives < 0) this.game.state.start('GameOver');
    // this.music.stop();
  },

  fireLazers: function fireLazers() {
    if (this.lazerTime == null) this.lazerTime = this.game.time.now;

    //  To avoid them being allowed to fire too fast we set a time limit
    if (this.game.time.now > this.lazerTime) {
      //  Grab the first bullet we can from the pool
      var lazer = this.lazers.getFirstExists(false);
      // if (lazer) {
      //  And fire it
      lazer.reset(this.player.x, this.player.y);
      this.player.angle = this.player.angle;
      lazer.body.velocity.y = Math.cos(this.player.angle * (Math.PI / 180)) * -400;
      lazer.body.velocity.x = Math.sin(this.player.angle * (Math.PI / 180)) * 400;
      this.lazerTime = this.game.time.now + 300;
      lazer.rotation = true;
      if (this.tracking) {
        this.rotation = Math.atan2(this.body.velocity.y, this.body.velocity.x);
      }

      if (this.scaleSpeed > 0) {
        this.scale.x += this.scaleSpeed;
        this.scale.y += this.scaleSpeed;
      }
      // lazer.rotation = this.game.physics.arcade.moveToObject(lazer, this.player, 500);
      // lazer.rotation = game.physics.arcade.moveToPointer(lazer, 1000, game.input.activePointer, 500);
    }
  },

  addToScore: function addToScore(score) {
    this.score += score;
    this.scoreText.text = this.score;
  },

  spawnEnemy: function spawnEnemy() {
    var enemy = this.enemies.getFirstExists(false);
    var MIN_ENEMY_SPACING = 200;
    var MAX_ENEMY_SPACING = 1000;
    var ENEMY_SPEED = 200;

    //  if( enemy ) {
    //    enemy.reset( Math.random() * game.world.width, 0 ); //set enemy to emerge from top border
    //    enemy.body.velocity.y = 10; //downward velocity
    // }
    if (enemy) {
      enemy.reset(game.rnd.integerInRange(0, game.width), -20);
      enemy.body.velocity.x = game.rnd.integerInRange(-300, 300);
      enemy.body.velocity.y = ENEMY_SPEED;
      enemy.body.drag.x = 100;
      this.wee.play('', 0, 0.3);
      // enemy.body.velocity.y = this.rnd.integerInRange(30, 60);
      // enemy.play('fly');

      enemy.update = function () {
        enemy.angle = 20 - game.math.radToDeg(Math.atan2(enemy.body.velocity.x, enemy.body.velocity.y));
        //  Kill enemies once they go off screen
        if (enemy.y > game.height + 200) {
          enemy.kill();
        }
      };
    }
  },

  setupExplosions: function setupExplosions() {
    this.explosions = game.add.group();
    this.explosions.physicsBodyType = Phaser.Physics.ARCADE;
    this.explosions.createMultiple(30, 'lazerBall');

    this.explosions.forEach(function (explosion) {
      explosion.anchor.x = 0.5;
      explosion.anchor.y = 0.5;
      explosion.animations.add('boom');
    }, this);
  },
  setupButtons: function setupButtons() {
    this.cursors = game.input.keyboard.createCursorKeys();
    this.fireButton = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
  },
  setupLazers: function setupLazers() {
    this.lazers = this.game.add.group();
    this.lazers.enableBody = true;
    this.lazers.physicsBodyType = Phaser.Physics.ARCADE;
    this.lazers.createMultiple(30, 'lazers');
    this.lazers.setAll('anchor.x', 0.5);
    this.lazers.setAll('anchor.y', 0.5);
    this.lazers.setAll('outOfBoundsKill', true);
    this.lazers.setAll('checkWorldBounds', true);
    this.lazers.tracking = false;
    this.lazers.scaleSpeed = 20;
  },

  setupEnemies: function setupEnemies() {
    this.enemies = game.add.group();
    this.enemies.enableBody = true;
    this.enemies.physicsBodyType = Phaser.Physics.ARCADE;
    this.enemies.scale.setTo(1.6);
    this.enemies.createMultiple(30, 'enemy');
    this.enemies.setAll('anchor.x', 0.5);
    this.enemies.setAll('anchor.y', 0.5);
    this.enemies.setAll('outOfBoundsKill', true);
    this.enemies.setAll('checkWorldBounds', true);
    this.enemies.callAll('animations.add', 'animations', 'fly10', [0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 18, 18, 19, 20, 21], 4, true);
    this.enemies.callAll('play', null, 'fly10');
    this.enemyDelay = 200;

    // this.enemiesTwo = game.add.group();
    // this.enemiesTwo.enableBody = true;
    // this.enemiesTwo.physicsBodyType = Phaser.Physics.ARCADE;
    // this.enemiesTwo.scale.setTo(1.5);
    // this.enemiesTwo.createMultiple(30, 'enemy');
    // this.enemiesTwo.setAll('anchor.x', 0.5);
    // this.enemiesTwo.setAll('anchor.y', 0.5);
    // this.enemiesTwo.setAll('outOfBoundsKill', true);
    // this.enemiesTwo.setAll('checkWorldBounds', true);
    // this.enemiesTwo.callAll('animations.add', 'animations', 'lick10', [111,12,13,14,15,16,17,18,18,18,19, 20, 21], 6, true);
    // this.enemiesTwo.callAll('play', null, 'lick10');
    // this.nextEnemyTwoAt = this.time.now + 5000;
    // this.EnemyDelay = 3000;
    // game.time.events.add(1000);
  },

  //////////PLAYER!!!!///////
  setupPlayer: function setupPlayer() {
    this.player = game.add.sprite(game.world.centerX, game.world.centerY, 'player');
    this.player.anchor.set(0.5);
    this.game.physics.enable(this.player, Phaser.Physics.ARCADE);
    this.player.body.allowRotation = false;
    this.PlayerAlive = true;
    this.catTrail = game.add.emitter(this.player.x, this.player.y + 50, 40);
    this.catTrail = game.add.emitter(this.player.x - 50, this.player.y + 23, 400);

    this.player.addChild(this.catTrail);
    this.catTrail.start(false, 2000, 100);
    this.catTrail.y = 0;
    this.catTrail.x = 0;
    this.catTrail.width = 10;
    this.catTrail.makeParticles('sparklebutt');
    this.catTrail.setXSpeed(20, -20);
    this.catTrail.setYSpeed(100, 90);
    this.catTrail.setRotation(0, 0);
    this.catTrail.setScale(0.15, 0.8, 0.15, 0.8, 2000, Phaser.Easing.Quintic.Out);
  }

};
//# sourceMappingURL=data:application/json;base64,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RUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQy9FOztDQUdKLENBQUMiLCJmaWxlIjoic3JjL2pzL0dhbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZ2FtZVN0YXRlID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucGh5c2ljcy5zdGFydFN5c3RlbShQaGFzZXIuUGh5c2ljcy5BUkNBREUpO1xuICAgIHRoaXMuYmFja2dyb3VuZCA9IGdhbWUuYWRkLnRpbGVTcHJpdGUoMCwwLCB0aGlzLmdhbWUud29ybGQud2lkdGgsIHRoaXMuZ2FtZS53b3JsZC5oZWlnaHQsICdzcGFjZScpO1xuICAgIHRoaXMuYmFja2dyb3VuZC5hdXRvU2Nyb2xsKC02MCwgLTIwKTtcbiAgICB0aGlzLnNldHVwUGxheWVyKCk7XG4gICAgdGhpcy5wbGF5ZXI7XG4gICAgdGhpcy5lbmVteTtcbiAgICB0aGlzLmVuZW15VHdvO1xuICAgIHRoaXMuY2F0VHJhaWw7XG4gICAgdGhpcy5zZXR1cEJ1dHRvbnMoKTtcbiAgICB0aGlzLnNldHVwTGF6ZXJzKCk7XG4gICAgdGhpcy5zZXR1cEVuZW1pZXMoKTtcbiAgICB0aGlzLnNldHVwRXhwbG9zaW9ucygpO1xuICAgIHRoaXMuZm9udFN0eWxlO1xuXG4gICAgdGhpcy5zY29yZSA9IDA7XG4gICAgdGhpcy5saXZlcyA9IDk7XG4gICAgdGhpcy5zY29yZVN0cmluZyA9ICcnO1xuICAgIHRoaXMuc2NvcmVUZXh0O1xuICAgIHRoaXMuUGxheWVyQWxpdmUgPSB0cnVlO1xuICAgIHRoaXMuZW5kVGltZSA9IDA7XG5cbiAgICB0aGlzLm11c2ljO1xuICAgIHRoaXMub3VjaDtcbiAgICB0aGlzLmJvb207XG4gICAgdGhpcy5kaW5nO1xuICAgIHRoaXMucGV3O1xuICAgIHRoaXMud2VlXG4gICAgdGhpcy5maXJlUmF0ZSA9IDEwMDA7XG4gICAgdGhpcy5uZXh0RmlyZSA9IDA7XG4gICAgdGhpcy5hbGl2ZSA9IHRydWU7XG5cbiAgICBnYW1lLnRpbWUuZXZlbnRzLmxvb3AoUGhhc2VyLlRpbWVyLlNFQ09ORCAqIDIsIHRoaXMuc3Bhd25FbmVteSwgdGhpcyk7XG4gICAgZ2FtZS5waHlzaWNzLnN0YXJ0U3lzdGVtKFBoYXNlci5QaHlzaWNzLkFSQ0FERSk7XG5cbiAgICBnYW1lLnRpbWUuYWR2YW5jZWRUaW1pbmcgPSB0cnVlO1xuICAgIHRoaXMuZm9udFN0eWxlID0geyBmb250OiBcIjQwcHggQXJpYWxcIiwgZmlsbDogXCIjRkZDQzAwXCIsIHN0cm9rZTogXCIjMzMzXCIsIHN0cm9rZVRoaWNrbmVzczogMywgYWxpZ246IFwiY2VudGVyXCIgfTtcbiAgICB0aGlzLmluc3RydWN0aW9ucyA9IHRoaXMuYWRkLnRleHQoIDQwMCwgNTAwLFxuICAgICAgJ1VzZSBtb3VzZSB0byBNb3ZlLCBQcmVzcyBTcGFjZWJhciB0byBGaXJlXFxuJyArICdHb29kIEx1Y2snLFxuICAgICAgeyBmb250OiAnMjhweCBBcmlhbCcsIGZpbGw6ICcjZmZmJywgYWxpZ246ICdjZW50ZXInIH0pO1xuICAgICAgdGhpcy5pbnN0cnVjdGlvbnMuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcbiAgICAgIHRoaXMuaW5zdEV4cGlyZSA9IHRoaXMudGltZS5ub3cgKyA5MDAwO1xuXG4gICAgICAvLyB2YXIgc3R5bGUgPSB7IGZvbnQ6ICczNHB4IEFyaWFsJywgZmlsbDogJyNmZmYnfTtcbiAgICAgIHRoaXMuc2NvcmVUZXh0ID0gdGhpcy5nYW1lLmFkZC50ZXh0KDYwLDEwLFwiU2NvcmUgOiBcIit0aGlzLnNjb3JlLHRoaXMuZm9udFN0eWxlKTtcbiAgICAgIHRoaXMubGl2ZXNUZXh0ID0gdGhpcy5nYW1lLmFkZC50ZXh0KGdhbWUud29ybGQud2lkdGggLSAyMDAsIDEwLFwiTGl2ZXMgOiBcIit0aGlzLmxpdmVzLHRoaXMuZm9udFN0eWxlKTtcblxuXG4gLy8gc2V0IHRoZSBlbmQgdGltZSB0byAzMCBzZWNvbmRzIGluIHRoZSBmdXR1cmVcbiAgICAgICAgdGhpcy5lbmRUaW1lID0gZ2FtZS50aW1lLm5vdyArICgxMDAwICogMzAgKTtcbiAgICAgICAgLy8gZXZlcnkgdGltZSB0aGUgdXNlciBjbGlja3MsIGFkZCA1IHNlY29uZHMgdG8gdGhlIGVuZCB0aW1lXG4gICAgICAgIC8vIGdhbWUuaW5wdXQub25Eb3duLmFkZChmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gICAgIHRoaXMuZW5kVGltZSA9IHRoaXMuZW5kVGltZSArICgxMDAwICogNSk7XG4gICAgICAgIC8vICAgICBjb25zb2xlLmxvZyhcIkFkZGVkIDUgc2Vjb25kc1wiKTtcbiAgICAgICAgLy8gfSwgdGhpcyk7XG4gICAgICAgIHRoaXMubXVzaWMgPSB0aGlzLmFkZC5hdWRpbygnZ2FtZV9hdWRpbycpO1xuICAgICAgICB0aGlzLm11c2ljLnBsYXkoJycsIDAsIDAuMywgdHJ1ZSk7XG4gICAgICAgIHRoaXMub3VjaCA9IHRoaXMuYWRkLmF1ZGlvKCdodXJ0X2F1ZGlvJyk7XG4gICAgICAgIHRoaXMuYm9vbSA9IHRoaXMuYWRkLmF1ZGlvKCdleHBsb3Npb25fYXVkaW8nKTtcbiAgICAgICAgdGhpcy5kaW5nID0gdGhpcy5hZGQuYXVkaW8oJ3NlbGVjdF9hdWRpbycpO1xuICAgICAgICB0aGlzLnBldyA9IHRoaXMuYWRkLmF1ZGlvKCdwZXdfYXVkaW8nKTtcbiAgICAgICAgdGhpcy53ZWUgPSB0aGlzLmFkZC5hdWRpbygnd2VlX2F1ZGlvJyk7XG5cbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uKCkge1xuICAgIC8vICBJZiB0aGUgUExBWUVSIGlzID4gOHB4IGF3YXkgZnJvbSB0aGUgcG9pbnRlciB0aGVuIGxldCdzIG1vdmUgdG8gaXRcbiAgICAgIGlmICh0aGlzLnBoeXNpY3MuYXJjYWRlLmRpc3RhbmNlVG9Qb2ludGVyKHRoaXMucGxheWVyLCB0aGlzLmdhbWUuaW5wdXQuYWN0aXZlUG9pbnRlcikgPiA4KVxuICAgICAge1xuICAgICAgICAvLyAgTWFrZSB0aGUgb2JqZWN0IHNlZWsgdG8gdGhlIGFjdGl2ZSBwb2ludGVyIChtb3VzZSBvciB0b3VjaCkuXG4gICAgICAgIHRoaXMucGh5c2ljcy5hcmNhZGUubW92ZVRvUG9pbnRlcih0aGlzLnBsYXllciwgNDAwKTtcbiAgICAgICAgdGhpcy5wbGF5ZXIucm90YXRpb24gPSB0aGlzLmdhbWUucGh5c2ljcy5hcmNhZGUuYW5nbGVUb1BvaW50ZXIodGhpcy5wbGF5ZXIpO1xuICAgICAgfVxuICAgICAgZWxzZVxuICAgICAge1xuICAgICAgICB0aGlzLnBsYXllci5ib2R5LnZlbG9jaXR5LnNldCgwKTtcbiAgICAgICAgfVxuXG4gICAgICAvLyAvL2NoZWNrIGZvciBwbGF5ZXIgY29tbWFuZHNcbiAgICAgIC8vICAgaWYoIHRoaXMuY3Vyc29ycy5sZWZ0LmlzRG93biApIHtcbiAgICAgIC8vICAgICAgIGlmKCB0aGlzLnBsYXllci5hbmdsZSA+ICgtOTApIClcbiAgICAgIC8vICAgICAgICAgICB0aGlzLnBsYXllci5hbmdsZSAtPSAwLjU7XG4gICAgICAvLyAgIH1cbiAgICAgIC8vICAgZWxzZSBpZiggdGhpcy5jdXJzb3JzLnJpZ2h0LmlzRG93biApe1xuICAgICAgLy8gICAgICAgaWYoIHRoaXMucGxheWVyLmFuZ2xlIDwgOTAgKVxuICAgICAgLy8gICAgICAgICAgIHRoaXMucGxheWVyLmFuZ2xlICs9IDAuNTtcbiAgICAgIC8vICAgfVxuLy8gZ2V0IHRpbWUgcmVtYWluaW5nIGluIG1pbGlzZWNvbmRzXG4gICAgICAgIHZhciBzdHlsZSA9IHsgZm9udDogJzM0cHggQXJpYWwnLCBhbGlnbjogJ2NlbnRlcid9O1xuICAgICAgICB2YXIgdGltZUxlZnQgPSB0aGlzLmVuZFRpbWUgLSBnYW1lLnRpbWUubm93O1xuICAgICAgICBpZiAodGltZUxlZnQgPj0gMCkge1xuICAgICAgICAgICAgLy8gc2hvdyB0aW1lIHJlbWFpbmluZyBpbiBzZWNvbmRzIChkaXZpZGUgYnkgMTAwMClcbiAgICAgIGdhbWUuZGVidWcudGV4dChNYXRoLmNlaWwodGltZUxlZnQgLyAxMDAwKSArIFwiIHNlY29uZHMgbGVmdCFcIiwgNTAwLCAxMDAsIFwiIzAwZmYwMFwiKTtcblxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ2FtZS5kZWJ1Zy50ZXh0KFwiUmFuIG91dCBvZiB0aW1lIVwiLCA1MDAsIDEwMCwgXCIjZmYwMDAwXCIpO1xuICAgICAgICAgICAgIC8vIHRoaXMubXVzaWMuc3RvcCgpO1xuICAgICAgICAgICAgZ2FtZS5zdGF0ZS5zdGFydCgnR2FtZU92ZXInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vLy8vLy8vTEFaRVJTLy8vLy8vLy8vLy8vXG4gICAgLy8gdGhpcy5wbGF5ZXIucm90YXRpb24gPSB0aGlzLmdhbWUucGh5c2ljcy5hcmNhZGUuYW5nbGVUb1BvaW50ZXIodGhpcy5sYXplcik7XG4gICAgICBpZih0aGlzLlBsYXllckFsaXZlICYmIHRoaXMuZmlyZUJ1dHRvbi5pc0Rvd24pIHtcbiAgICAgICAgdGhpcy5maXJlTGF6ZXJzKCk7XG4gICAgICAgIHRoaXMucGV3LnBsYXkoKTtcblxuICAgICAgICB9XG4gICAgLy8gICAgIGlmIChnYW1lLnRpbWUubm93ID4gZmlyaW5nVGltZXIpXG4gICAgLy8ge1xuICAgIC8vICAgICBlbmVteUZpcmVzKCk7XG4gICAgLy8gfVxuICAgLy8gIGZ1bmN0aW9uIHVwZGF0ZUNvdW50ZXIoKSB7XG4gICAvLyAgdGhpcy50b3RhbCsrO1xuICAgLy8gIH1cbiAgIC8vICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAvLyB0aGlzLiBnYW1lLmRlYnVnLnRleHQoJ1RpbWUgdW50aWwgZXZlbnQ6ICcgKyB0aW1lci5kdXJhdGlvbi50b0ZpeGVkKDApLCAzMiwgMzIpO1xuICAgLy8gIHRoaXMuZ2FtZS5kZWJ1Zy50ZXh0KCdMb29wIENvdW50OiAnICsgdG90YWwsIDMyLCA2NCk7XG5cbiAgIC8vICB9XG5cbiAgICBnYW1lLnBoeXNpY3MuYXJjYWRlLm92ZXJsYXAoIHRoaXMubGF6ZXJzLCB0aGlzLmVuZW1pZXMsIHRoaXMubGF6ZXJIaXRzRW5lbXksIG51bGwsIHRoaXMpO1xuICAgIC8vIHRoaXMuZ2FtZS5waHlzaWNzLmFyY2FkZS5vdmVybGFwKCB0aGlzLmxhemVycywgbnVsbCwgdGhpcyk7XG4gICAgICB0aGlzLmdhbWUucGh5c2ljcy5hcmNhZGUuY29sbGlkZSh0aGlzLmVuZW1pZXMsIHRoaXMucGxheWVyLCB0aGlzLmVuZW15SGl0UGxheWVyLG51bGwsIHRoaXMpO1xuICAgICAgdGhpcy5nYW1lLnBoeXNpY3MuYXJjYWRlLmNvbGxpZGUodGhpcy5lbmVtaWVzLCB0aGlzLmxhemVycywgdGhpcy5sYXplckhpdHNFbmVteSxudWxsLCB0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMuaW5zdHJ1Y3Rpb25zLmV4aXN0cyAmJiB0aGlzLnRpbWUubm93ID4gdGhpcy5pbnN0RXhwaXJlKSB7XG4gICAgICAgIHRoaXMuaW5zdHJ1Y3Rpb25zLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgICBsYXplckhpdHNFbmVteSA6IGZ1bmN0aW9uKGxhemVyLCBlbmVteSkge1xuICAgICAgICAvLyAgV2hlbiBhIGx6YWVyIGhpdHMgYW4gZW5lbXkgd2Uga2lsbCB0aGVtIGJvdGhcbiAgICAgIGlmKHRoaXMuZW5lbWllcy5nZXRJbmRleChlbmVteSkgPiAtMSlcbiAgICAgICAgdGhpcy5lbmVtaWVzLnJlbW92ZShlbmVteSk7XG4gICAgICB0aGlzLmJvb20ucGxheSgpO1xuICAgICAgZW5lbXkua2lsbCgpO1xuICAgICAgbGF6ZXIua2lsbCgpO1xuICAgICAgdGhpcy5zY29yZSArPSAxMDtcbiAgICAgIHRoaXMuc2NvcmVUZXh0LnNldFRleHQoXCJTY29yZSA6IFwiK3RoaXMuc2NvcmUpO1xuICAgICAgICAvLyAgQW5kIGNyZWF0ZSBhbiBleHBsb3Npb25cbiAgICAgICAgdmFyIGV4cGxvc2lvbiA9IHRoaXMuZXhwbG9zaW9ucy5nZXRGaXJzdEV4aXN0cyhmYWxzZSk7XG4gICAgICAgIGV4cGxvc2lvbi5yZXNldChlbmVteS5ib2R5LngsIGVuZW15LmJvZHkueSk7XG4gICAgICAgIGV4cGxvc2lvbi5wbGF5KCdib29tJywgMzAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgLy8gZW5lbXlCdWxsZXRzLmNhbGxBbGwoJ2tpbGwnLHRoaXMpO1xuICAgICAgICAvLyByZXN0YXJ0KCk7XG4gICAgICB9LFxuXG4gICAgZW5lbXlIaXRQbGF5ZXIgOiBmdW5jdGlvbihwbGF5ZXIsIGVuZW15KXtcbiAgICAgIGlmKHRoaXMuZW5lbWllcy5nZXRJbmRleChlbmVteSkgPiAtMSlcbiAgICAgICAgdGhpcy5lbmVtaWVzLnJlbW92ZShlbmVteSk7XG4gICAgICAgIGVuZW15LmtpbGwoKTtcbiAgICAgICAgIHRoaXMub3VjaC5wbGF5KCk7XG4gICAgICAgIHRoaXMubGl2ZXMgLT0gMTtcbiAgICAgICAgdGhpcy5saXZlc1RleHQuc2V0VGV4dChcIkxpdmVzIDogXCIrdGhpcy5saXZlcyk7XG4gICAgICAgIHZhciBleHBsb3Npb24gPSB0aGlzLmV4cGxvc2lvbnMuZ2V0Rmlyc3RFeGlzdHMoZmFsc2UpO1xuICAgICAgICBleHBsb3Npb24ucmVzZXQocGxheWVyLmJvZHkueCwgcGxheWVyLmJvZHkueSk7XG4gICAgICAgIGV4cGxvc2lvbi5yZXNldChlbmVteS5ib2R5LngsIGVuZW15LmJvZHkueSk7XG4gICAgICAgIGV4cGxvc2lvbi5wbGF5KCdib29tJywgMzAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgZ2FtZS5waHlzaWNzLmFyY2FkZS5vdmVybGFwKHRoaXMucGxheWVyLCB0aGlzLmVuZW1pZXMsIHRoaXMuZW5lbXlIaXRQbGF5ZXIsIG51bGwsIHRoaXMpO1xuXG5cbiAgICAgIGlmKHRoaXMubGl2ZXMgPCAwKVxuICAgICAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ0dhbWVPdmVyJyk7XG4gICAgICAgIC8vIHRoaXMubXVzaWMuc3RvcCgpO1xuXG4gICAgfSxcblxuICAgZmlyZUxhemVycyA6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiggdGhpcy5sYXplclRpbWUgPT0gbnVsbCApXG4gICAgICAgICAgICB0aGlzLmxhemVyVGltZSA9IHRoaXMuZ2FtZS50aW1lLm5vdztcblxuICAgICAgICAvLyAgVG8gYXZvaWQgdGhlbSBiZWluZyBhbGxvd2VkIHRvIGZpcmUgdG9vIGZhc3Qgd2Ugc2V0IGEgdGltZSBsaW1pdFxuICAgICAgICBpZiAoIHRoaXMuZ2FtZS50aW1lLm5vdyA+IHRoaXMubGF6ZXJUaW1lIClcbiAgICAgICAge1xuICAgICAgICAgICAgLy8gIEdyYWIgdGhlIGZpcnN0IGJ1bGxldCB3ZSBjYW4gZnJvbSB0aGUgcG9vbFxuICAgICAgICAgICAgdmFyIGxhemVyID0gdGhpcy5sYXplcnMuZ2V0Rmlyc3RFeGlzdHMoZmFsc2UpO1xuICAgICAgICAgICAgLy8gaWYgKGxhemVyKSB7XG4gICAgICAgICAgICAgICAgLy8gIEFuZCBmaXJlIGl0XG4gICAgICAgICAgICAgICAgbGF6ZXIucmVzZXQoIHRoaXMucGxheWVyLngsIHRoaXMucGxheWVyLnkpO1xuICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLmFuZ2xlID0gdGhpcy5wbGF5ZXIuYW5nbGU7XG4gICAgICAgICAgICAgICAgbGF6ZXIuYm9keS52ZWxvY2l0eS55ID0gTWF0aC5jb3MoIHRoaXMucGxheWVyLmFuZ2xlICogKE1hdGguUEkvMTgwKSApICogKC00MDApO1xuICAgICAgICAgICAgICAgIGxhemVyLmJvZHkudmVsb2NpdHkueCA9IE1hdGguc2luKCB0aGlzLnBsYXllci5hbmdsZSAqIChNYXRoLlBJLzE4MCkgKSAqIDQwMDtcbiAgICAgICAgICAgICAgICB0aGlzLmxhemVyVGltZSA9IHRoaXMuZ2FtZS50aW1lLm5vdyArIDMwMDtcbiAgICAgICAgICAgICAgICBsYXplci5yb3RhdGlvbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHJhY2tpbmcpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMucm90YXRpb24gPSBNYXRoLmF0YW4yKHRoaXMuYm9keS52ZWxvY2l0eS55LCB0aGlzLmJvZHkudmVsb2NpdHkueCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zY2FsZVNwZWVkID4gMClcbiAgICAgICAge1xuICAgICAgICAgICAgdGhpcy5zY2FsZS54ICs9IHRoaXMuc2NhbGVTcGVlZDtcbiAgICAgICAgICAgIHRoaXMuc2NhbGUueSArPSB0aGlzLnNjYWxlU3BlZWQ7XG4gICAgICAgIH1cbiAgICAgICAgICAgIC8vIGxhemVyLnJvdGF0aW9uID0gdGhpcy5nYW1lLnBoeXNpY3MuYXJjYWRlLm1vdmVUb09iamVjdChsYXplciwgdGhpcy5wbGF5ZXIsIDUwMCk7XG4gICAgICAgICAgICAvLyBsYXplci5yb3RhdGlvbiA9IGdhbWUucGh5c2ljcy5hcmNhZGUubW92ZVRvUG9pbnRlcihsYXplciwgMTAwMCwgZ2FtZS5pbnB1dC5hY3RpdmVQb2ludGVyLCA1MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG5cbiAgICAgICAgICBhZGRUb1Njb3JlOiBmdW5jdGlvbiAoc2NvcmUpIHtcbiAgICAgICAgIHRoaXMuc2NvcmUgKz0gc2NvcmU7XG4gICAgICAgIHRoaXMuc2NvcmVUZXh0LnRleHQgPSB0aGlzLnNjb3JlO1xuICAgICAgICAgfSxcblxuICAgICAgICBzcGF3bkVuZW15OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgZW5lbXkgPSB0aGlzLmVuZW1pZXMuZ2V0Rmlyc3RFeGlzdHMoZmFsc2UpO1xuICAgICAgICAgIHZhciBNSU5fRU5FTVlfU1BBQ0lORyA9IDIwMDtcbiAgICAgICAgICB2YXIgTUFYX0VORU1ZX1NQQUNJTkcgPSAxMDAwO1xuICAgICAgICAgIHZhciBFTkVNWV9TUEVFRCA9IDIwMDtcblxuXG4gICAgICAgICAvLyAgaWYoIGVuZW15ICkge1xuICAgICAgICAgLy8gICAgZW5lbXkucmVzZXQoIE1hdGgucmFuZG9tKCkgKiBnYW1lLndvcmxkLndpZHRoLCAwICk7IC8vc2V0IGVuZW15IHRvIGVtZXJnZSBmcm9tIHRvcCBib3JkZXJcbiAgICAgICAgIC8vICAgIGVuZW15LmJvZHkudmVsb2NpdHkueSA9IDEwOyAvL2Rvd253YXJkIHZlbG9jaXR5XG4gICAgICAgICAvLyB9XG4gICAgICAgICBpZiAoZW5lbXkpIHtcbiAgICAgICAgZW5lbXkucmVzZXQoZ2FtZS5ybmQuaW50ZWdlckluUmFuZ2UoMCwgZ2FtZS53aWR0aCksIC0yMCk7XG4gICAgICAgIGVuZW15LmJvZHkudmVsb2NpdHkueCA9IGdhbWUucm5kLmludGVnZXJJblJhbmdlKC0zMDAsIDMwMCk7XG4gICAgICAgIGVuZW15LmJvZHkudmVsb2NpdHkueSA9IEVORU1ZX1NQRUVEO1xuICAgICAgICBlbmVteS5ib2R5LmRyYWcueCA9IDEwMDtcbiAgICAgICAgdGhpcy53ZWUucGxheSgnJywgMCwgMC4zICk7XG4gICAgICAgIC8vIGVuZW15LmJvZHkudmVsb2NpdHkueSA9IHRoaXMucm5kLmludGVnZXJJblJhbmdlKDMwLCA2MCk7XG4gICAgICAgIC8vIGVuZW15LnBsYXkoJ2ZseScpO1xuXG4gICAgICAgIGVuZW15LnVwZGF0ZSA9IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgZW5lbXkuYW5nbGUgPSAyMCAtIGdhbWUubWF0aC5yYWRUb0RlZyhNYXRoLmF0YW4yKGVuZW15LmJvZHkudmVsb2NpdHkueCwgZW5lbXkuYm9keS52ZWxvY2l0eS55KSk7XG4gICAgICAgICAgLy8gIEtpbGwgZW5lbWllcyBvbmNlIHRoZXkgZ28gb2ZmIHNjcmVlblxuICAgICAgICAgIGlmIChlbmVteS55ID4gZ2FtZS5oZWlnaHQgKyAyMDApIHtcbiAgICAgICAgICAgIGVuZW15LmtpbGwoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gIH0sXG5cblxuICAgICAgc2V0dXBFeHBsb3Npb25zOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5leHBsb3Npb25zID0gZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICAgICAgdGhpcy5leHBsb3Npb25zLnBoeXNpY3NCb2R5VHlwZSA9IFBoYXNlci5QaHlzaWNzLkFSQ0FERTtcbiAgICAgICAgdGhpcy5leHBsb3Npb25zLmNyZWF0ZU11bHRpcGxlKDMwLCAnbGF6ZXJCYWxsJyk7XG5cbiAgICAgICAgdGhpcy5leHBsb3Npb25zLmZvckVhY2goIGZ1bmN0aW9uKGV4cGxvc2lvbiApIHtcbiAgICAgICAgICAgIGV4cGxvc2lvbi5hbmNob3IueCA9IDAuNTtcbiAgICAgICAgICAgIGV4cGxvc2lvbi5hbmNob3IueSA9IDAuNTtcbiAgICAgICAgICAgIGV4cGxvc2lvbi5hbmltYXRpb25zLmFkZCgnYm9vbScpO1xuICAgICAgICB9LCB0aGlzICk7XG5cbiAgICAgIH0sXG4gICAgICBzZXR1cEJ1dHRvbnM6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmN1cnNvcnMgPSBnYW1lLmlucHV0LmtleWJvYXJkLmNyZWF0ZUN1cnNvcktleXMoKTtcbiAgICAgICAgdGhpcy5maXJlQnV0dG9uID0gZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRLZXkoUGhhc2VyLktleWJvYXJkLlNQQUNFQkFSKTtcbiAgICAgIH0sXG4gICAgICBzZXR1cExhemVyczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMubGF6ZXJzID0gdGhpcy5nYW1lLmFkZC5ncm91cCgpO1xuICAgICAgICB0aGlzLmxhemVycy5lbmFibGVCb2R5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sYXplcnMucGh5c2ljc0JvZHlUeXBlID0gUGhhc2VyLlBoeXNpY3MuQVJDQURFO1xuICAgICAgICB0aGlzLmxhemVycy5jcmVhdGVNdWx0aXBsZSgzMCwgJ2xhemVycycpO1xuICAgICAgICB0aGlzLmxhemVycy5zZXRBbGwoJ2FuY2hvci54JywgMC41KTtcbiAgICAgICAgdGhpcy5sYXplcnMuc2V0QWxsKCdhbmNob3IueScsIDAuNSk7XG4gICAgICAgIHRoaXMubGF6ZXJzLnNldEFsbCgnb3V0T2ZCb3VuZHNLaWxsJywgdHJ1ZSk7XG4gICAgICAgIHRoaXMubGF6ZXJzLnNldEFsbCgnY2hlY2tXb3JsZEJvdW5kcycsIHRydWUpO1xuICAgICAgICB0aGlzLmxhemVycy50cmFja2luZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxhemVycy5zY2FsZVNwZWVkID0gMjA7XG4gICAgICB9LFxuXG5cbiAgICAgIHNldHVwRW5lbWllczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZW5lbWllcyA9IGdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIHRoaXMuZW5lbWllcy5lbmFibGVCb2R5ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5lbmVtaWVzLnBoeXNpY3NCb2R5VHlwZSA9IFBoYXNlci5QaHlzaWNzLkFSQ0FERTtcbiAgICAgICAgdGhpcy5lbmVtaWVzLnNjYWxlLnNldFRvKDEuNik7XG4gICAgICAgIHRoaXMuZW5lbWllcy5jcmVhdGVNdWx0aXBsZSgzMCwgJ2VuZW15Jyk7XG4gICAgICAgIHRoaXMuZW5lbWllcy5zZXRBbGwoJ2FuY2hvci54JywgMC41KTtcbiAgICAgICAgdGhpcy5lbmVtaWVzLnNldEFsbCgnYW5jaG9yLnknLCAwLjUpO1xuICAgICAgICB0aGlzLmVuZW1pZXMuc2V0QWxsKCdvdXRPZkJvdW5kc0tpbGwnLCB0cnVlKTtcbiAgICAgICAgdGhpcy5lbmVtaWVzLnNldEFsbCgnY2hlY2tXb3JsZEJvdW5kcycsIHRydWUpO1xuICAgICAgICB0aGlzLmVuZW1pZXMuY2FsbEFsbCgnYW5pbWF0aW9ucy5hZGQnLCAnYW5pbWF0aW9ucycsICdmbHkxMCcsIFswLDEsMiwzLDQsNSw2LDcsOCw4LDgsIDksIDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE4LDE4LDE5LCAyMCwgMjFdLCA0LCB0cnVlKTtcbiAgICAgICAgdGhpcy5lbmVtaWVzLmNhbGxBbGwoJ3BsYXknLCBudWxsLCAnZmx5MTAnKTtcbiAgICAgICAgdGhpcy5lbmVteURlbGF5ID0gMjAwO1xuXG4gICAgICAgIC8vIHRoaXMuZW5lbWllc1R3byA9IGdhbWUuYWRkLmdyb3VwKCk7XG4gICAgICAgIC8vIHRoaXMuZW5lbWllc1R3by5lbmFibGVCb2R5ID0gdHJ1ZTtcbiAgICAgICAgLy8gdGhpcy5lbmVtaWVzVHdvLnBoeXNpY3NCb2R5VHlwZSA9IFBoYXNlci5QaHlzaWNzLkFSQ0FERTtcbiAgICAgICAgLy8gdGhpcy5lbmVtaWVzVHdvLnNjYWxlLnNldFRvKDEuNSk7XG4gICAgICAgIC8vIHRoaXMuZW5lbWllc1R3by5jcmVhdGVNdWx0aXBsZSgzMCwgJ2VuZW15Jyk7XG4gICAgICAgIC8vIHRoaXMuZW5lbWllc1R3by5zZXRBbGwoJ2FuY2hvci54JywgMC41KTtcbiAgICAgICAgLy8gdGhpcy5lbmVtaWVzVHdvLnNldEFsbCgnYW5jaG9yLnknLCAwLjUpO1xuICAgICAgICAvLyB0aGlzLmVuZW1pZXNUd28uc2V0QWxsKCdvdXRPZkJvdW5kc0tpbGwnLCB0cnVlKTtcbiAgICAgICAgLy8gdGhpcy5lbmVtaWVzVHdvLnNldEFsbCgnY2hlY2tXb3JsZEJvdW5kcycsIHRydWUpO1xuICAgICAgICAvLyB0aGlzLmVuZW1pZXNUd28uY2FsbEFsbCgnYW5pbWF0aW9ucy5hZGQnLCAnYW5pbWF0aW9ucycsICdsaWNrMTAnLCBbMTExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE4LDE4LDE5LCAyMCwgMjFdLCA2LCB0cnVlKTtcbiAgICAgICAgLy8gdGhpcy5lbmVtaWVzVHdvLmNhbGxBbGwoJ3BsYXknLCBudWxsLCAnbGljazEwJyk7XG4gICAgICAgIC8vIHRoaXMubmV4dEVuZW15VHdvQXQgPSB0aGlzLnRpbWUubm93ICsgNTAwMDtcbiAgICAgICAgLy8gdGhpcy5FbmVteURlbGF5ID0gMzAwMDtcbiAgICAgICAgLy8gZ2FtZS50aW1lLmV2ZW50cy5hZGQoMTAwMCk7XG5cbiAgICAgIH0sXG5cblxuICAgIC8vLy8vLy8vLy9QTEFZRVIhISEhLy8vLy8vL1xuICAgICAgc2V0dXBQbGF5ZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnBsYXllciA9IGdhbWUuYWRkLnNwcml0ZShnYW1lLndvcmxkLmNlbnRlclgsIGdhbWUud29ybGQuY2VudGVyWSwgJ3BsYXllcicpO1xuICAgICAgICB0aGlzLnBsYXllci5hbmNob3Iuc2V0KDAuNSk7XG4gICAgICAgIHRoaXMuZ2FtZS5waHlzaWNzLmVuYWJsZSh0aGlzLnBsYXllciwgUGhhc2VyLlBoeXNpY3MuQVJDQURFKTtcbiAgICAgICAgdGhpcy5wbGF5ZXIuYm9keS5hbGxvd1JvdGF0aW9uID0gZmFsc2U7XG4gICAgICAgIHRoaXMuUGxheWVyQWxpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLmNhdFRyYWlsID0gZ2FtZS5hZGQuZW1pdHRlcih0aGlzLnBsYXllci54LCB0aGlzLnBsYXllci55ICsgNTAsIDQwKTtcbiAgICAgICAgdGhpcy5jYXRUcmFpbCA9IGdhbWUuYWRkLmVtaXR0ZXIodGhpcy5wbGF5ZXIueCAtIDUwLCB0aGlzLnBsYXllci55ICsgMjMsIDQwMCk7XG5cbiAgICAgICAgdGhpcy5wbGF5ZXIuYWRkQ2hpbGQodGhpcy5jYXRUcmFpbCk7XG4gICAgICAgIHRoaXMuY2F0VHJhaWwuc3RhcnQoZmFsc2UsIDIwMDAsIDEwMCk7XG4gICAgICAgIHRoaXMuY2F0VHJhaWwueSA9IDA7XG4gICAgICAgIHRoaXMuY2F0VHJhaWwueCA9IDA7XG4gICAgICAgIHRoaXMuY2F0VHJhaWwud2lkdGggPTEwO1xuICAgICAgICB0aGlzLmNhdFRyYWlsLm1ha2VQYXJ0aWNsZXMoJ3NwYXJrbGVidXR0Jyk7XG4gICAgICAgIHRoaXMuY2F0VHJhaWwuc2V0WFNwZWVkKDIwLCAtMjApO1xuICAgICAgICB0aGlzLmNhdFRyYWlsLnNldFlTcGVlZCgxMDAsIDkwKTtcbiAgICAgICAgdGhpcy5jYXRUcmFpbC5zZXRSb3RhdGlvbigwLDApO1xuICAgICAgICB0aGlzLmNhdFRyYWlsLnNldFNjYWxlKDAuMTUsIDAuOCwgMC4xNSwgMC44LCAyMDAwLCBQaGFzZXIuRWFzaW5nLlF1aW50aWMuT3V0KTtcbiAgICAgIH0sXG5cblxuICB9O1xuXG4iXX0=
